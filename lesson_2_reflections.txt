What happens when you initialize a repository? Why do you need to do it?

When you intialize a git repository it creates a repository without any commits
I need to do it becuase the computer allows the use to manually create commits

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is an in between stage that does not actually allow you to do anything
The only thing it allows us to do is to commit the files into the repository

How can you use the staging area to make sure you have one commit per logical change?
The staging area allows the user to see the changes they have made to the program before they commit
The staging area serves as the middle stage between adding and commiting to make sure it is logical

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
branches will allow the user to make changes to the program without having to worry about ruining the whole program
branches can allow the user to make different game modes or the game in different languages
if one of these modes doesn't work properly you can always just revert back to a previous branch that did work

How do the diagrams help you visualize the branch structure?
The diagrams help me to understand which commits git log decides to show on the screen
it also helps show how when you make a commit where the head goes 
this diagram shows how git thinks through the commits and helps the user better understnad how git worked

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches combines the code that was added from each of the branches
We represent it the way we do because the merged branch now has two parents
The merge checks which lines of code were there originally and which were added and deleted
From there it is able to determine what to add to the new branch

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
pros: sometimes Git will actually auto merge and you wont have to worry about manually doing it 
auto merging saves a lot of time and hastle 
you do not have to look back and compare the two files to see which ones should be kept
cons: some of the merges may not make logical sense 
an auto merge can introduce a bug into the program that you were not expecting